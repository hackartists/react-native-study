#+TITLE:     React-Native Android
#+AUTHOR:    Jongseok Choi
#+EMAIL:     hackartists@gmail.com

#+DESCRIPTION: 
#+KEYWORDS: react-native
#+LANGUAGE:  en
#+OPTIONS:   num:t toc:nil ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS:   tex:t d:nil todo:t pri:nil tags:nil
#+OPTIONS:   timestamp:t

# started this on 2020-03-09 Mon

# this allows defining headlines to be exported/not be exported
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# By default I do not want that source code blocks are evaluated on export. Usually
# I want to evaluate them interactively and retain the original results.
#+PROPERTY: header-args :eval never-export
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [t,10pt]
#+LaTeX_CLASS_OPTIONS: [aspectratio=169]

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

#+OPTIONS: H:3
#+BEAMER_THEME: Darmstadt
#+BEAMER_OUTER_THEME: miniframes [subsection=false]

#+BEAMER_HEADER: \usepackage[utf8]{inputenc}
#+BEAMER_HEADER: \usepackage{kotex}
#+BEAMER_HEADER: \usepackage{rotating}
#+BEAMER_HEADER: \usepackage{graphicx}
#+BEAMER_HEADER: \usepackage{amssymb,amsmath}
#+BEAMER_HEADER: \usepackage{amsthm}
#+BEAMER_HEADER: \usepackage{algorithmic}
#+BEAMER_HEADER: \usepackage[ruled,linesnumbered]{algorithm2e}
#+BEAMER_HEADER: \usepackage{listings}
#+BEAMER_HEADER: \usepackage[titletoc]{appendix}
#+BEAMER_HEADER: \usepackage{rotating}
#+BEAMER_HEADER: \usepackage{multirow}
#+BEAMER_HEADER: \usepackage{array}
#+BEAMER_HEADER: \usepackage{supertabular}
#+BEAMER_HEADER: \usepackage{dcolumn}
#+BEAMER_HEADER: \usepackage{adjustbox}
#+BEAMER_HEADER: \usepackage{epsfig}
#+BEAMER_HEADER: \usepackage{subfigure}
#+BEAMER_HEADER: \usepackage{acronym}
#+BEAMER_HEADER: \usepackage{url}
#+BEAMER_HEADER: \usepackage{graphicx}
#+BEAMER_HEADER: \usepackage{mathtools}
#+BEAMER_HEADER: \usepackage{longtable}
#+BEAMER_HEADER: \usepackage[acronym]{glossaries}
#+BEAMER_HEADER: \usepackage[font=small,skip=0pt]{caption}
#+BEAMER_HEADER: \usepackage{xcolor}
#+BEAMER_HEADER: \usepackage{color}
#+BEAMER_HEADER: \usepackage{colortbl}
#+BEAMER_HEADER: \usepackage{tikz}

#+BEAMER_HEADER: \AtBeginSection[]{
#+BEAMER_HEADER: \begin{frame}<beamer>\frametitle{Table of Contents}\begin{columns}[t]
#+BEAMER_HEADER: \begin{column}{.5\textwidth}\tableofcontents[currentsection,sections={1-3}]\end{column}
#+BEAMER_HEADER: \begin{column}{.5\textwidth}\tableofcontents[currentsection,sections={4-7}]\end{column}
#+BEAMER_HEADER: \end{columns}\end{frame}
#+BEAMER_HEADER: \subsection{}
#+BEAMER_HEADER: }
#+BEAMER_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}
#+BEAMER: \setbeamercovered{transparent=30}
#+BEAMER_HEADER: \usepackage{blindtext}
#+BEAMER_HEADER: \input{../common/abb}
#+BEAMER_HEADER: \input{../common/options}

* React-Native and Android Setup

** React-Native Setup

*** Android Setup
 - Downloading [[https://adoptopenjdk.net/][AdoptOpenJDK]] version 8
 - Downloading [[https://dl.google.com/android/repository/commandlinetools-linux-6200805_latest.zip][Android SDK]]
 - Installing Android SDK into the PC
 #+BEGIN_SRC sh 
     unzip commandlinetools-linux-6200805_latest.zip
     cd tools
     export ANDROID_HOME="path-to-install-sdk"
     bin/sdkmanager --sdk_root=$ANDROID_HOME "tools"
     export PATH="$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$PATH"
     mkdir ~/.android
     touch ~/.android/repositories.cfg
     sdkmanager "build-tools;28.0.3" "platforms;android-28"
 #+END_SRC
 - Installing AVD targets and running an emulator
 #+BEGIN_SRC sh
   sdkmanager "system-images;android-28;google_apis;x86_64" "system-images;android-28;google_apis;x86"
   avdmanager create avd --package "system-images;android-28;google_apis;x86_64" --name android-28
   avdmanager list avd
   emulator @android-28
 #+END_SRC

*** Installing react-native
- Installing ~react-native~
#+BEGIN_SRC sh
npm i -g react-native  
#+END_SRC
- Installing ~watchman~ for monitoring files chages
#+BEGIN_SRC sh
  sudo pacman -S watchman ## for Arch linux
  brew install watchman ## for Mac OS X

  ## General linux from source
  git clone https://github.com/facebook/watchman.git -b v4.9.0 --depth 1
  cd watchman 
  ./autogen.sh
  ./configure
  make
  sudo make install
#+END_SRC
- Initializing a project and building it
#+BEGIN_SRC sh
npx react-native init proj
cd proj/android
sudo pacman -S gradle ## brew install gradle
gralde build
#+END_SRC

*** Running an app on emulator
- We have to install an apk file into an emulator.
#+BEAMER: \vfill

#+BEGIN_SRC shell
  adb install path-to-apk/app.apk
#+END_SRC


* Android Native Modules

** Toast Module

*** Toast basic module
- Sometimes an app needs access to a platform API that React Native doesn't have a corresponding module for yet.
  - Native modules are usually distributed as npm packages
  - To get the basic scaffolding make sure to read [[https://reactnative.dev/docs/native-modules-setup][Native Modules Setup]]  guide first.

- For creating a moudle and using it, we need the following steps.
  - We start by creating a native module. 
  - Implement some override features: ~getName~, ~getConstants~ (opt).
  - To expose a method to JavaScript a Java method must be annotated using ~@ReactMethod~
  - The last step within Java is to register the Module.
  - Create a javascript wrapper for the java module.

*** A native module
- Creating a native module and override.
  - ~getName~ is mandatory for ~ReactContextBaseJavaModule~.
  - ~getConstants~ is optional override method.

#+BEGIN_SRC java
  public class ToastModule extends ReactContextBaseJavaModule {
      private static ReactApplicationContext reactContext;
      private static final String DURATION_SHORT_KEY = "SHORT";
      private static final String DURATION_LONG_KEY = "LONG";

      ToastModule(ReactApplicationContext context) {
          super(context);
          reactContext = context;
      }

      @Override
      public String getName() {
          return "ToastExample";
      }

      @Override
      public Map<String, Object> getConstants() {
          final Map<String, Object> constants = new HashMap<>();
          constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);
          constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);
          return constants;
      }

      @ReactMethod
      public void show(String message, int duration) {
          Toast.makeText(getReactApplicationContext(), message, duration).show();
      }
  }
#+END_SRC

*** ReactMethod
- expose a method to JavaScript a Java method must be annotated using ~@ReactMethod~
  - The return type of bridge methods is always ~void~.
  - React Native bridge is asynchronous
  - to pass a result to JavaScript is by using callbacks or emitting events

#+BEGIN_SRC java
   @ReactMethod
  public void show(String message, int duration) {
    Toast.makeText(getReactApplicationContext(), message, duration).show();
  }
#+END_SRC

*** Register the Module
- The last step within Java is to register the Module
  - This happens in the ~createNativeModules~ of your apps package.
  - Create a new Java Class named ~CustomToastPackage.java~.

#+BEGIN_SRC java
  public class CustomToastPackage implements ReactPackage {
      @Override
      public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
          return Collections.emptyList();
      }

      @Override
      public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
          List<NativeModule> modules = new ArrayList<>();

          modules.add(new ToastModule(reactContext));

          return modules;
      }
  }
#+END_SRC

*** Adding the package
- The package needs to be provided in the ~getPackages~ method of the ~MainApplication.java~ file.
  - ~android/app/src/main/java/com/your-app-name/MainApplication.java~

#+BEGIN_SRC java
  protected List<ReactPackage> getPackages() {
  @SuppressWarnings("UnnecessaryLocalVariable")
  List<ReactPackage> packages = new PackageList(this).getPackages();
  // Packages that cannot be autolinked yet can be added manually here, for example:
  // packages.add(new MyReactNativePackage());
  packages.add(new CustomToastPackage()); // <-- Add this line with your package name.
  return packages;
}
#+END_SRC


*** Using a native module
- To access your new functionality from JavaScript, it is common to wrap the native module in a JavaScript module. 
  - The consumers of your library the need to pull it off of NativeModules each time.
#+BEGIN_SRC js
  import {NativeModules} from 'react-native';
  module.exports = NativeModules.ToastExample;
#+END_SRC

- Using the wrapper components:

#+BEGIN_SRC js
  import ToastExample from './ToastExample';

  ToastExample.show('Awesome', ToastExample.SHORT);
#+END_SRC

** Beyond Toasts
*** Callbacks
- Native modules also support a unique kind of argument - a callback. 
  - It is used to provide the function call result to JavaScript.

#+BEAMER: \vfill

#+BEGIN_SRC java
  @ReactMethod
  public void measureLayout(int tag, int ancestorTag,
                            Callback errorCallback, Callback successCallback) {
      try {
          measureLayout(tag, ancestorTag, mMeasureBuffer);
          float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);
          float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);
          float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);
          float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);
          successCallback.invoke(relativeX, relativeY, width, height);
      } catch (IllegalViewOperationException e) {
          errorCallback.invoke(e.getMessage());
      }
  }
#+END_SRC

*** Callbacks in javascript
- This method would be accessed in JavaScript using:
  - A native module is supposed to invoke its callback only once.
  - Remember that bridge communication is asynchronous

#+BEAMER: \vfill

#+BEGIN_SRC js
  UIManager.measureLayout(
    100,
    100,
    (msg) => {
      console.log(msg);
    },
    (x, y, width, height) => {
      console.log(x + ':' + y + ':' + width + ':' + height);
    },
  );
#+END_SRC

*** Promieses
- Native modules can also fulfill a promise, which can simplify your JavaScript.
  - especially when using ES2016's async/await syntax.
  - When the last parameter of a bridged native method is a ~Promise~, its corresponding JS method will return a JS ~Promise~ object.

#+BEGIN_SRC java
  @ReactMethod
  public void measureLayout(int tag, int ancestorTag, Promise promise) {
    try {
      measureLayout(tag, ancestorTag, mMeasureBuffer);

      WritableMap map = Arguments.createMap();

      map.putDouble("relativeX", PixelUtil.toDIPFromPixel(mMeasureBuffer[0]));
      map.putDouble("relativeY", PixelUtil.toDIPFromPixel(mMeasureBuffer[1]));
      map.putDouble("width", PixelUtil.toDIPFromPixel(mMeasureBuffer[2]));
      map.putDouble("height", PixelUtil.toDIPFromPixel(mMeasureBuffer[3]));

      promise.resolve(map);
    } catch (IllegalViewOperationException e) {
      promise.reject(E_LAYOUT_ERROR, e);
    }
  }
#+END_SRC

*** Promises - javascript
- The JavaScript counterpart of this method returns a Promise.
  - you can use the ~await~ keyword within an ~async~ function

#+BEAMER: \vfill
#+BEGIN_SRC js
  async function measureLayout() {
    try {
      var {relativeX, relativeY, width, height} = await UIManager.measureLayout(
        100,
        100,
      );

      console.log(relativeX + ':' + relativeY + ':' + width + ':' + height);
    } catch (e) {
      console.error(e);
    }
  }
#+END_SRC


*** Threading
- Native modules should not have any assumptions about what thread they are being called on
  - If a blocking call is required, the heavy work should be dispatched to an internally managed worker thread.
  - Any callbacks distributed from there.
** Argument types
*** Argument types
- The following argument types are supported for methods annotated with ~@ReactMethod~
  - they directly map to their JavaScript equivalents.
#+BEAMER: \vfill

#+BEGIN_SRC java
  Boolean -> Bool
  Integer -> Number
  Double -> Number
  Float -> Number
  String -> String
  Callback -> function
  ReadableMap -> Object
  ReadableArray -> Array
#+END_SRC



** Sending Events

*** Events to JavaScript
- Native modules can signal events to JavaScript without being invoked directly.
  - this is to use the ~RCTDeviceEventEmitter~.

#+BEGIN_SRC java
  private void sendEvent(ReactContext reactContext,
                         String eventName,
                         @Nullable WritableMap params) {
      reactContext
          .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
          .emit(eventName, params);
  }
#+END_SRC


*** Receiving an event
- JavaScript modules can then register to receive events by ~addListener~ on the ~NativeEventEmitter~ class.

#+BEGIN_SRC js
  import { NativeEventEmitter, NativeModules } from 'react-native';

  const eventEmitter = new NativeEventEmitter(NativeModules.ToastExample);
  eventEmitter.addListener('EventReminder', (event) => {
    console.log(event.eventProperty) // "someValue"
  }
#+END_SRC

*** Activity life cycle
- Implemnt a listener

#+BEGIN_SRC java
   private final ActivityEventListener mActivityEventListener = new BaseActivityEventListener() {

    @Override
    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent intent) {
      if (requestCode == IMAGE_PICKER_REQUEST) {
        if (mPickerPromise != null) {
          if (resultCode == Activity.RESULT_CANCELED) {
            mPickerPromise.reject(E_PICKER_CANCELLED, "Image picker was cancelled");
          } else if (resultCode == Activity.RESULT_OK) {
            Uri uri = intent.getData();

            if (uri == null) {
              mPickerPromise.reject(E_NO_IMAGE_DATA_FOUND, "No image data found");
            } else {
              mPickerPromise.resolve(uri.toString());
            }
          }

          mPickerPromise = null;
        }
      }
    }
  };
#+END_SRC


*** Register listener
- you must extend BaseActivityEventListener or implement ActivityEventListener. 
  - you need to register the listener in the module's constructor,

#+BEGIN_SRC java
   ImagePickerModule(ReactApplicationContext reactContext) {
    super(reactContext);

    // Add the listener for `onActivityResult`
    reactContext.addActivityEventListener(mActivityEventListener);
  }
#+END_SRC

*** Listening to LifeCycle events
- Listening to the activity's LifeCycle events such as onResume, onPause etc.
  - You can listen to the activity's LifeCycle events by implementing the following methods:
#+BEGIN_SRC java
@Override
public void onHostResume() {
    // Activity `onResume`
}

@Override
public void onHostPause() {
    // Activity `onPause`
}

@Override
public void onHostDestroy() {
    // Activity `onDestroy`
}  
#+END_SRC

* Useful Tips

** Platform Specific Code

*** Platform module
- When building a cross-platform app, *you'll want to re-use as much code as possible*.
  - For example you may want to implement separate visual components for Android and iOS.

- React Native provides two ways to organize your code and separate it by platform:

  - Using the Platform module.

  - Using platform-specific file extensions.


*** Platform module (platform.select)
- ~Platform.OS~ returns the value for the platform you are currently running on.
  - ~Platform.OS~ will be ~ios~ when running on iOS and ~android~ when running on Android.

**** Platform.OS                                                      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:

#+BEGIN_SRC js
  import {Platform, StyleSheet} from 'react-native';

  const styles = StyleSheet.create({
      height: Platform.OS === 'ios' ? 200 : 100,
  });
#+END_SRC

#+BEGIN_SRC js
  const Component = Platform.select({
      ios: () => require('ComponentIOS'),
      android: () => require('ComponentAndroid'),
  })();

      <Component />;
#+END_SRC


**** Platform.select                                                  :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
#+BEGIN_SRC js
  import {Platform, StyleSheet} from 'react-native';

  const styles = StyleSheet.create({
      container: {
          flex: 1,
          ...Platform.select({
              ios: {
                  backgroundColor: 'red',
              },
              android: {
                  backgroundColor: 'blue',
              },
          }),
      },
  });
#+END_SRC

***  Detecting the version
- ~Platform.Version~ can also be used to detect the version.
  - Android platform version is a google API version.
  - iOS version is a OS version such as *10.3*

**** the Android version                                              :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
#+BEGIN_SRC js
  import {Platform} from 'react-native';

  if (Platform.Version === 25) {
      console.log('Running on Nougat!');
  }
#+END_SRC

**** the iOS version                                                  :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
#+BEGIN_SRC js
  import {Platform} from 'react-native';

  const majorVersionIOS = parseInt(Platform.Version, 10);
  if (majorVersionIOS <= 9) {
      console.log('Work around a change in behavior');
  }  
#+END_SRC

*** Platform-specific extension
**** Platform-specific extension                                      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
- When your platform-specific code is more complex, 
  - you should consider splitting the code out into separate files. 
  - React Native will detect when a file has a .ios. or .android. extension

#+BEAMER_HEADER: \vfill

#+BEGIN_SRC shell
  BigButton.ios.js
  BigButton.android.js
#+END_SRC

#+BEGIN_SRC js
  import BigButton from './BigButton';
#+END_SRC

**** Native-specific extensions                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
- You can also use the .native.js extension when a module needs to be shared between NodeJS/Web and React Native
  - It has no Android/iOS differences.
  - The React Native bundler for both Android and iOS (Metro)

#+BEAMER_HEADER: \vfill

#+BEGIN_SRC shell
  Container.js
  Container.native.js
#+END_SRC

#+BEGIN_SRC js
  import Container from './Container';
#+END_SRC


** Navigating Between Screens

*** React navigation
- The community solution to navigation is a standalone library 

#+BEGIN_SRC shell
  npm install @react-navigation/native @react-navigation/stack
#+END_SRC

**** For Expo project                                                 :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
- Installing ~Expo~ packages.
#+BEGIN_SRC shell
  expo install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view
#+END_SRC


**** For bare project                                                 :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
- Installing ~npm~ packages.
#+BEGIN_SRC shell
  npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view
#+END_SRC

- Installing ~cocoapod~.
#+BEGIN_SRC shell
cd ios
pod install
cd ..
#+END_SRC


*** Usage
- There are 2 screens (Home and Profile) defined using the Stack.Screen component.

#+BEAMER: \vfill

#+BEGIN_SRC js
  import * as React from 'react';
  import {NavigationContainer} from '@react-navigation/native';
  import {createStackNavigator} from '@react-navigation/stack';
  const Stack = createStackNavigator();

  function MyStack() {
    return (
        <NavigationContainer>
        <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} options={{title: 'Welcome'}} />
        <Stack.Screen name="Profile" component={Profile} />
        </Stack.Navigator>
        </NavigationContainer>
    );
  }
#+END_SRC

*** HomeScreen Implementation
- Each screen takes a component prop that is a React component.
  - The views in the stack navigator use native components and the Animated library to deliver 60fps animations

#+BEAMER: \vfill

#+BEGIN_SRC js
  function HomeScreen({navigation}) {
    return (
        <Button
      title="Go to Jane's profile"
      onPress={() => navigation.navigate('Profile', {name: 'Jane'})}
        />
    );
  }
#+END_SRC
